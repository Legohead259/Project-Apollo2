package util.equations;

public class LorentzForceEquation {
	static class Variables {
		/**
		 * The charge of current going through the rails in Coulombs
		 */
		static double charge;
		
		/**
		 * The distance between the rails in meters
		 */
		static double distBetweenRails;
		
		/**
		 * The muzzle velocity of the projectile in m/s
		 */
		static double velocity;
		
		/**
		 * The strength of the magnetic field around the rails in Tesla
		 */
		static double magField;
		
		/**
		 * The barrel travel time of the projectile in seconds
		 */
		static double barrelTravelTime;
		
		/**
		 * The strength of the electric field around the rails in v/m
		 */
		static double elecField;
		
		/**
		 * The current passing through the rails in amps
		 */
		static double current;
		
		/**
		 * The radius of the magnetic field in meters
		 */
		static final double MAG_FIELD_RADIUS = .1;
		
		/**
		 * The force generated by the Lorentz force
		 */
		public static double lorentzForce;
	}
	
	
	//*****START CONSTRUCTOR*****
	
	
	/**
	 * Lorentz force equation constructor for ATI's calculations
	 * 
	 * @Precondition q must be in Coulombs, d must be in meters, velocity must be in m/s, b must be in Tesla, and time must be in seconds
	 * 
	 * @param q the charge of the capacitor bank
	 * @param d the distance between the rails
	 * @param v the velocity the projectile is traveling at
	 * @param b the strength of the magnetic field
	 * @param t the time the projectile is in the barrel of the railgun
	 */
	public LorentzForceEquation(double q, double d, double v, double t) {
		Variables.charge = q; Variables.distBetweenRails = d; Variables.velocity = v; Variables.barrelTravelTime = t; init();
		
	}
	
	
	//*****END CONSTRUCTOR*****
	
	
	//*****START CALCULATION METHODS*****
	
	
	/**
	 * Method that initializes the electric and magnetic field strengths and the amount of current
	 */
	void init() {
		calcElectricField(); calcMagneticField(); calcCurrent();
	}
	
	/**
	 * Method that calculates the Lorentz force
	 */
	public void calcLorentzForce() {
		Variables.lorentzForce = Variables.charge * (Variables.elecField + (Variables.velocity * Variables.magField));
	}
	
	/**
	 * Method that calculates the strength of the electric field around the rails
	 */
	void calcElectricField() {
		double k = 9 * Math.pow(10, 9);
		Variables.elecField = k * Variables.charge / Math.pow(Variables.distBetweenRails, 2);
	}
	
	/**
	 * Method that calculates the strength of the magnetic field around the rails
	 */
	void calcMagneticField() {
		double u = 4 * Math.PI * Math.pow(10, -7);
		Variables.magField = u * Variables.current / 2 * Math.PI * Variables.MAG_FIELD_RADIUS;
	}
	
	/**
	 * Method that calculates the current passing through the rails
	 */
	void calcCurrent() {
		Variables.current = Variables.charge / Variables.barrelTravelTime;
	}
	
	
	//*****END CALCULATIONS*****
	
	
	//*****START GETTERS*****
	

	/**
	 * @return the lorentzForce acting on the projectile in Newtons
	 */
	public static double getLorentzForce() {
		return Variables.lorentzForce;
	}
	
	
	//*****END GETTERS*****
}
